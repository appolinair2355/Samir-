import os
import asyncio
import re
import json
import zipfile
import tempfile
import shutil
from datetime import datetime
from telethon import TelegramClient, events
from telethon.events import ChatAction
from dotenv import load_dotenv
from predictor import CardPredictor
from scheduler import PredictionScheduler
from models import init_database, db
from aiohttp import web
import threading

# Load environment variables
load_dotenv()

# --- CONFIGURATION ---
try:
    API_ID = int(os.getenv('API_ID') or '0')
    API_HASH = os.getenv('API_HASH') or ''
    BOT_TOKEN = os.getenv('BOT_TOKEN') or ''
    ADMIN_ID = int(os.getenv('ADMIN_ID') or '0')
    PORT = int(os.getenv('PORT') or '10000')
        # Configuration pour Replit
    replit_port = int(os.environ.get('PORT', 8080))
    os.environ['PORT'] = str(replit_port)
    
    logger.info("üöÄ TeleFeed Bot d√©marr√© pour Replit Always On")
    
    # Validation des variables requises
    if not API_ID or API_ID == 0:
        raise ValueError("API_ID manquant ou invalide")
    if not API_HASH:
        raise ValueError("API_HASH manquant")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN manquant")
        
    print(f"‚úÖ Configuration charg√©e: API_ID={API_ID}, ADMIN_ID={ADMIN_ID}, PORT={PORT}")
except Exception as e:
    print(f"‚ùå Erreur configuration: {e}")
    print("V√©rifiez vos variables d'environnement")
    exit(1)

# Fichier de configuration persistante
CONFIG_FILE = 'bot_config.json'

# Variables d'√©tat
detected_stat_channel = None
detected_display_channel = None
confirmation_pending = {}

def load_config():
    """Load configuration from database"""
    global detected_stat_channel, detected_display_channel
    try:
        if db:
            detected_stat_channel = db.get_config('stat_channel')
            detected_display_channel = db.get_config('display_channel')
            if detected_stat_channel:
                detected_stat_channel = int(detected_stat_channel)
            if detected_display_channel:
                detected_display_channel = int(detected_display_channel)
            print(f"‚úÖ Configuration charg√©e depuis la DB: Stats={detected_stat_channel}, Display={detected_display_channel}")
        else:
            # Fallback vers l'ancien syst√®me JSON si DB non disponible
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    detected_stat_channel = config.get('stat_channel')
                    detected_display_channel = config.get('display_channel')
                    print(f"‚úÖ Configuration charg√©e depuis JSON: Stats={detected_stat_channel}, Display={detected_display_channel}")
            else:
                print("‚ÑπÔ∏è Aucune configuration trouv√©e, nouvelle configuration")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur chargement configuration: {e}")

def save_config():
    """Save configuration to database and JSON backup"""
    try:
        if db:
            # Sauvegarde en base de donn√©es
            db.set_config('stat_channel', detected_stat_channel)
            db.set_config('display_channel', detected_display_channel)
            print("üíæ Configuration sauvegard√©e en base de donn√©es")

        # Sauvegarde JSON de secours
        config = {
            'stat_channel': detected_stat_channel,
            'display_channel': detected_display_channel
        }
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)
        print(f"üíæ Configuration sauvegard√©e: Stats={detected_stat_channel}, Display={detected_display_channel}")
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde configuration: {e}")

def update_channel_config(source_id: int, target_id: int):
    """Update channel configuration"""
    global detected_stat_channel, detected_display_channel
    detected_stat_channel = source_id
    detected_display_channel = target_id
    save_config()

# Initialize database
database = init_database()

# Gestionnaire de pr√©dictions
predictor = CardPredictor()

# Planificateur automatique
scheduler = None

# Initialize Telegram client with unique session name
import time
session_name = f'bot_session_{int(time.time())}'
client = TelegramClient(session_name, API_ID, API_HASH)

async def start_bot():
    """Start the bot with proper error handling"""
    try:
        # Load saved configuration first
        load_config()

        await client.start(bot_token=BOT_TOKEN)
        print("Bot d√©marr√© avec succ√®s...")

        # Get bot info
        me = await client.get_me()
        username = getattr(me, 'username', 'Unknown') or f"ID:{getattr(me, 'id', 'Unknown')}"
        print(f"Bot connect√©: @{username}")

    except Exception as e:
        print(f"Erreur lors du d√©marrage du bot: {e}")
        return False

    return True

# --- INVITATION / CONFIRMATION ---
@client.on(events.ChatAction())
async def handler_join(event):
    """Handle bot joining channels/groups"""
    global confirmation_pending

    try:
        print(f"ChatAction event: {event}")
        print(f"user_joined: {event.user_joined}, user_added: {event.user_added}")
        print(f"user_id: {event.user_id}, chat_id: {event.chat_id}")

        if event.user_joined or event.user_added:
            me = await client.get_me()
            me_id = getattr(me, 'id', None)
            print(f"Mon ID: {me_id}, Event user_id: {event.user_id}")

            if event.user_id == me_id:
                confirmation_pending[event.chat_id] = 'waiting_confirmation'

                # Get channel info
                try:
                    chat = await client.get_entity(event.chat_id)
                    chat_title = getattr(chat, 'title', f'Canal {event.chat_id}')
                except:
                    chat_title = f'Canal {event.chat_id}'

                # Send private invitation to admin
                invitation_msg = f"""üîî **Nouveau canal d√©tect√©**

üìã **Canal** : {chat_title}
üÜî **ID** : {event.chat_id}

**Choisissez le type de canal** :
‚Ä¢ `/set_stat {event.chat_id}` - Canal de statistiques
‚Ä¢ `/set_display {event.chat_id}` - Canal de diffusion

Envoyez votre choix en r√©ponse √† ce message."""

                try:
                    await client.send_message(ADMIN_ID, invitation_msg)
                    print(f"Invitation envoy√©e √† l'admin pour le canal: {chat_title} ({event.chat_id})")
                except Exception as e:
                    print(f"Erreur envoi invitation priv√©e: {e}")
                    # Fallback: send to the channel temporarily for testing
                    await client.send_message(event.chat_id, f"‚ö†Ô∏è Impossible d'envoyer l'invitation priv√©e. Canal ID: {event.chat_id}")
                    print(f"Message fallback envoy√© dans le canal {event.chat_id}")
    except Exception as e:
        print(f"Erreur dans handler_join: {e}")

@client.on(events.NewMessage(pattern=r'/set_stat (-?\d+)'))
async def set_stat_channel(event):
    """Set statistics channel (only admin in private)"""
    global detected_stat_channel, confirmation_pending

    try:
        # Only allow in private chat with admin
        if event.is_group or event.is_channel:
            return

        if event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extract channel ID from command
        match = event.pattern_match
        channel_id = int(match.group(1))

        # Check if channel is waiting for confirmation
        if channel_id not in confirmation_pending:
            await event.respond("‚ùå Ce canal n'est pas en attente de configuration")
            return

        detected_stat_channel = channel_id
        confirmation_pending[channel_id] = 'configured_stat'

        # Save configuration
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"‚úÖ **Canal de statistiques configur√©**\nüìã {chat_title}\n\n‚ú® Le bot surveillera ce canal pour les pr√©dictions - d√©velopp√© par Sossou Kouam√© Appolinaire\nüíæ Configuration sauvegard√©e automatiquement")
        print(f"Canal de statistiques configur√©: {channel_id}")

    except Exception as e:
        print(f"Erreur dans set_stat_channel: {e}")

@client.on(events.NewMessage(pattern=r'/set_display (-?\d+)'))
async def set_display_channel(event):
    """Set display channel (only admin in private)"""
    global detected_display_channel, confirmation_pending

    try:
        # Only allow in private chat with admin
        if event.is_group or event.is_channel:
            return

        if event.sender_id != ADMIN_ID:
            await event.respond("‚ùå Seul l'administrateur peut configurer les canaux")
            return

        # Extract channel ID from command
        match = event.pattern_match
        channel_id = int(match.group(1))

        # Check if channel is waiting for confirmation
        if channel_id not in confirmation_pending:
            await event.respond("‚ùå Ce canal n'est pas en attente de configuration")
            return

        detected_display_channel = channel_id
        confirmation_pending[channel_id] = 'configured_display'

        # Save configuration
        save_config()

        try:
            chat = await client.get_entity(channel_id)
            chat_title = getattr(chat, 'title', f'Canal {channel_id}')
        except:
            chat_title = f'Canal {channel_id}'

        await event.respond(f"‚úÖ **Canal de diffusion configur√©**\nüìã {chat_title}\n\nüöÄ Le bot publiera les pr√©dictions dans ce canal - d√©velopp√© par Sossou Kouam√© Appolinaire\nüíæ Configuration sauvegard√©e automatiquement")
        print(f"Canal de diffusion configur√©: {channel_id}")

    except Exception as e:
        print(f"Erreur dans set_display_channel: {e}")

# --- COMMANDES DE BASE ---
@client.on(events.NewMessage(pattern='/start'))
async def start_command(event):
    """Send welcome message when user starts the bot"""
    try:
        welcome_msg = """üéØ **Bot de Pr√©diction de Cartes - Bienvenue !**

üîπ **D√©velopp√© par Sossou Kouam√© Appolinaire**

**Fonctionnalit√©s** :
‚Ä¢ Pr√©dictions automatiques anticip√©es (d√©clench√©es sur 7, 8)
‚Ä¢ Pr√©dictions pour les prochains jeux se terminant par 0
‚Ä¢ V√©rification des r√©sultats avec statuts d√©taill√©s
‚Ä¢ Rapports automatiques toutes les 20 pr√©dictions mises √† jour

**Configuration** :
1. Ajoutez-moi dans vos canaux
2. Je vous enverrai automatiquement une invitation priv√©e
3. R√©pondez avec `/set_stat [ID]` ou `/set_display [ID]`

**Commandes** :
‚Ä¢ `/start` - Ce message
‚Ä¢ `/status` - √âtat du bot (admin)
‚Ä¢ `/report` - Compteur de bilan d√©taill√© (admin)
‚Ä¢ `/sta` - Statut des d√©clencheurs (admin)
‚Ä¢ `/reset` - R√©initialiser (admin)
‚Ä¢ `/deploy` - Pack de d√©ploiement Render.com (admin)

Le bot est pr√™t √† analyser vos jeux ! üöÄ"""

        await event.respond(welcome_msg)
        print(f"Message de bienvenue envoy√© √† l'utilisateur {event.sender_id}")

        # Test message private pour v√©rifier la connectivit√©
        if event.sender_id == ADMIN_ID:
            await asyncio.sleep(2)
            test_msg = "üîß Test de connectivit√© : Je peux vous envoyer des messages priv√©s !"
            await event.respond(test_msg)

    except Exception as e:
        print(f"Erreur dans start_command: {e}")

# --- COMMANDES ADMINISTRATIVES ---
@client.on(events.NewMessage(pattern='/status'))
async def show_status(event):
    """Show bot status (admin only)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        config_status = "‚úÖ Sauvegard√©e" if os.path.exists(CONFIG_FILE) else "‚ùå Non sauvegard√©e"
        status_msg = f"""üìä **Statut du Bot**

Canal statistiques: {'‚úÖ Configur√©' if detected_stat_channel else '‚ùå Non configur√©'} ({detected_stat_channel})
Canal diffusion: {'‚úÖ Configur√©' if detected_display_channel else '‚ùå Non configur√©'} ({detected_display_channel})
Configuration persistante: {config_status}
Pr√©dictions actives: {len(predictor.prediction_status)}
Derni√®res pr√©dictions: {len(predictor.last_predictions)}
Messages trait√©s: {len(predictor.processed_messages)}
"""
        await event.respond(status_msg)
    except Exception as e:
        print(f"Erreur dans show_status: {e}")

@client.on(events.NewMessage(pattern='/reset'))
async def reset_bot(event):
    """Reset bot configuration (admin only)"""
    global detected_stat_channel, detected_display_channel, confirmation_pending

    try:
        if event.sender_id != ADMIN_ID:
            return

        detected_stat_channel = None
        detected_display_channel = None
        confirmation_pending.clear()
        predictor.reset()

        # Save the reset configuration
        save_config()

        await event.respond("üîÑ Bot r√©initialis√© avec succ√®s\nüíæ Configuration effac√©e et sauvegard√©e")
        print("Bot r√©initialis√© par l'administrateur")
    except Exception as e:
        print(f"Erreur dans reset_bot: {e}")

@client.on(events.NewMessage(pattern='/deploy'))
async def deploy_command(event):
    """Create deployment package (admin only)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        await event.respond("üöÄ Cr√©ation du package de d√©ploiement Render.com...")

        # Create temporary directory
        with tempfile.TemporaryDirectory() as temp_dir:
            deploy_dir = os.path.join(temp_dir, "bot_deployment")
            os.makedirs(deploy_dir, exist_ok=True)

            # Files to include in deployment
            files_to_copy = [
                'main.py',
                'predictor.py',
                'scheduler.py',
                'models.py',
                'render_main.py',
                'render_predictor.py',
                'pyproject.toml',
                'render_requirements.txt',
                'render.yaml',
                'README_RENDER.md',
                'README_SCHEDULER.md',
                'replit.md'
            ]

            # Copy files
            copied_files = []
            for filename in files_to_copy:
                if os.path.exists(filename):
                    shutil.copy2(filename, deploy_dir)
                    copied_files.append(filename)

            # Create .env template
            env_template = """# Telegram Bot Configuration
API_ID=your_api_id
API_HASH=your_api_hash
BOT_TOKEN=your_bot_token
ADMIN_ID=your_admin_id

# Database Configuration (Render will provide these)
DATABASE_URL=postgresql://user:password@host:port/database
PGHOST=host
PGPORT=5432
PGDATABASE=database
PGUSER=user
PGPASSWORD=password"""

            with open(os.path.join(deploy_dir, '.env.example'), 'w') as f:
                f.write(env_template)

            # Create ZIP archive
            zip_path = os.path.join(temp_dir, 'bot_deployment.zip')
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(deploy_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arc_name = os.path.relpath(file_path, deploy_dir)
                        zipf.write(file_path, arc_name)

            # Send ZIP file
            await client.send_file(
                event.chat_id,
                zip_path,
                caption=f"""üì¶ **Package de d√©ploiement Render.com**

‚úÖ **Fichiers inclus** : {len(copied_files)} fichiers
‚Ä¢ Code source complet du bot
‚Ä¢ Configuration Render.com
‚Ä¢ Documentation compl√®te

üöÄ **Instructions de d√©ploiement** :
1. Extractez le ZIP sur votre machine
2. Uploadez sur GitHub
3. Connectez √† Render.com
4. Configurez les variables d'environnement
5. D√©ployez !

üìñ Consultez README_RENDER.md pour les d√©tails complets."""
            )

        await event.respond("‚úÖ Package de d√©ploiement cr√©√© et envoy√© !")

    except Exception as e:
        print(f"Erreur dans deploy_command: {e}")
        await event.respond(f"‚ùå Erreur lors de la cr√©ation du package: {str(e)}")

@client.on(events.NewMessage(pattern='/test_invite'))
async def test_invite(event):
    """Test sending invitation (admin only)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Test invitation message
        test_msg = f"""üîî **Test d'invitation**

üìã **Canal test** : Canal de test
üÜî **ID** : -1001234567890

**Choisissez le type de canal** :
‚Ä¢ `/set_stat -1001234567890` - Canal de statistiques
‚Ä¢ `/set_display -1001234567890` - Canal de diffusion

Ceci est un message de test pour v√©rifier les invitations."""

        await event.respond(test_msg)
        print(f"Message de test envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans test_invite: {e}")

@client.on(events.NewMessage(pattern='/sta'))
async def show_trigger_numbers(event):
    """Show current trigger numbers for automatic predictions"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        trigger_nums = list(predictor.trigger_numbers)
        trigger_nums.sort()

        msg = f"""üìä **Statut des D√©clencheurs Automatiques**

üéØ **Num√©ros de fin activant les pr√©dictions**: {', '.join(map(str, trigger_nums))}

üìã **Fonctionnement**:
‚Ä¢ Le bot surveille les jeux se terminant par {', '.join(map(str, trigger_nums))}
‚Ä¢ Il pr√©dit automatiquement le prochain jeu se terminant par 0
‚Ä¢ Format: "üîµ {{num√©ro}} üìå Düîµ statut :''‚åõ''"

üìà **Statistiques actuelles**:
‚Ä¢ Pr√©dictions actives: {len([s for s in predictor.prediction_status.values() if s == '‚åõ'])}
‚Ä¢ Canal stats configur√©: {'‚úÖ' if detected_stat_channel else '‚ùå'}
‚Ä¢ Canal affichage configur√©: {'‚úÖ' if detected_display_channel else '‚ùå'}

üí° **Canal d√©tect√©**: {detected_stat_channel if detected_stat_channel else 'Aucun'}"""

        await event.respond(msg)
        print(f"Statut des d√©clencheurs envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans show_trigger_numbers: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/report'))
async def show_report_status(event):
    """Show report counter and remaining messages until next automatic report"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        total_predictions = len(predictor.status_log)
        processed_messages = len(predictor.processed_messages)
        pending_predictions = len([s for s in predictor.prediction_status.values() if s == '‚åõ'])

        # Calculate remaining until next report (every 20 predictions)
        if total_predictions == 0:
            remaining_for_report = 20
            last_report_at = 0
        else:
            last_report_at = (total_predictions // 20) * 20
            remaining_for_report = 20 - (total_predictions % 20)
            if remaining_for_report == 20:
                remaining_for_report = 0

        # Calculate statistics for completed predictions
        wins = sum(1 for _, status in predictor.status_log if '‚úÖ' in status)
        losses = sum(1 for _, status in predictor.status_log if '‚ùå' in status or '‚≠ï' in status)
        win_rate = (wins / total_predictions * 100) if total_predictions > 0 else 0.0

        msg = f"""üìä **Compteur de Bilan et Statut des Pr√©dictions**

üéØ **Messages Trait√©s**:
‚Ä¢ Total de jeux trait√©s: {processed_messages}
‚Ä¢ Total de pr√©dictions g√©n√©r√©es: {total_predictions}
‚Ä¢ Pr√©dictions en attente: {pending_predictions}

üìà **R√©sultats des Pr√©dictions**:
‚Ä¢ Pr√©dictions r√©ussies: {wins} ‚úÖ
‚Ä¢ Pr√©dictions √©chou√©es: {losses} ‚ùå
‚Ä¢ Taux de r√©ussite: {win_rate:.1f}%

üìã **Compteur de Rapport Automatique**:
‚Ä¢ Dernier rapport g√©n√©r√© apr√®s: {last_report_at} pr√©dictions
‚Ä¢ Pr√©dictions depuis dernier rapport: {total_predictions - last_report_at}
‚Ä¢ Restant avant prochain rapport: {remaining_for_report}

‚è∞ **Prochaine G√©n√©ration**:
{'üîÑ Le prochain rapport sera g√©n√©r√© automatiquement' if remaining_for_report > 0 else '‚úÖ Pr√™t pour la g√©n√©ration du prochain rapport'}

üí° **Note**: Les rapports automatiques sont g√©n√©r√©s toutes les 20 pr√©dictions mises √† jour avec un statut final."""

        await event.respond(msg)
        print(f"Rapport de compteur envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans show_report_status: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/deploy'))
async def deploy_package(event):
    """Generate and send deployment package (admin only)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        await event.respond("üöÄ **G√©n√©ration du Pack de D√©ploiement Render.com**\n\n‚è≥ Cr√©ation des fichiers optimis√©s...")

        # Create zip package
        import zipfile
        import io

        # Create in-memory zip
        zip_buffer = io.BytesIO()

        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            # Add all deployment files
            files_to_add = [
                ('render_main.py', 'main.py'),
                ('render_predictor.py', 'predictor.py'),
                ('render_requirements.txt', 'requirements.txt'),
                ('render.yaml', 'render.yaml'),
                ('README_RENDER.md', 'README.md')
            ]

            for source_file, zip_name in files_to_add:
                try:
                    with open(source_file, 'r', encoding='utf-8') as f:
                        zip_file.writestr(zip_name, f.read())
                except Exception as e:
                    print(f"Erreur ajout fichier {source_file}: {e}")

        zip_buffer.seek(0)

        # Prepare deployment info message
        deploy_msg = f"""‚úÖ **Pack de d√©ploiement pr√™t !**

üì¶ **Contenu du package** :
‚Ä¢ `main.py` - Bot complet avec toutes les commandes (/start, /stats, /reset, /sta, /test_invite)
‚Ä¢ `predictor.py` - Moteur de pr√©diction avec syst√®me de mise √† jour automatique
‚Ä¢ `requirements.txt` - D√©pendances Python (telethon, aiohttp, python-dotenv)
‚Ä¢ `render.yaml` - Configuration Render avec health checks
‚Ä¢ `README.md` - Guide de d√©ploiement complet avec instructions d√©taill√©es

üéØ **Commandes incluses** :
‚Ä¢ `/start` - D√©marrage et aide
‚Ä¢ `/stats` - Statistiques de performance
‚Ä¢ `/reset` - R√©initialisation du bot
‚Ä¢ `/sta` - Statut des d√©clencheurs automatiques
‚Ä¢ `/test_invite` - Test des invitations
‚Ä¢ Pr√©dictions automatiques sur num√©ros 7, 8

üîß **Variables d'environnement requises** :
```
API_ID = {API_ID}
API_HASH = {API_HASH}
BOT_TOKEN = {BOT_TOKEN}
ADMIN_ID = {ADMIN_ID}
PORT = 10000
```

üåê **√âtapes rapides** :
1. Uploadez le contenu du ZIP sur GitHub
2. Cr√©ez un Web Service sur render.com
3. Ajoutez les variables d'environnement
4. D√©ployez !

üìö **Guide complet** : Consultez le README.md inclus

üéØ **D√©velopp√© par Sossou Kouam√© Appolinaire**"""

        await event.respond(deploy_msg)

        # Send the zip file
        await client.send_file(
            event.chat_id,
            zip_buffer.getvalue(),
            file_name="telegram_bot_render_deploy.zip",
            caption="üì¶ Pack de d√©ploiement complet pour Render.com"
        )

        print(f"Pack de d√©ploiement envoy√© √† l'admin")

    except Exception as e:
        print(f"Erreur dans deploy_package: {e}")
        await event.respond(f"‚ùå Erreur lors de la g√©n√©ration: {e}")

@client.on(events.NewMessage(pattern='/scheduler'))
async def manage_scheduler(event):
    """Gestion du planificateur automatique (admin uniquement)"""
    global scheduler
    try:
        if event.sender_id != ADMIN_ID:
            return

        # Parse command arguments
        message_parts = event.message.message.split()
        if len(message_parts) < 2:
            await event.respond("""ü§ñ **Commandes du Planificateur Automatique**

**Usage**: `/scheduler [commande]`

**Commandes disponibles**:
‚Ä¢ `start` - D√©marre le planificateur automatique
‚Ä¢ `stop` - Arr√™te le planificateur
‚Ä¢ `status` - Affiche le statut actuel
‚Ä¢ `generate` - G√©n√®re une nouvelle planification
‚Ä¢ `config [source_id] [target_id]` - Configure les canaux

**Exemple**: `/scheduler config -1001234567890 -1001987654321`""")
            return

        command = message_parts[1].lower()

        if command == "start":
            if not scheduler:
                if detected_stat_channel and detected_display_channel:
                    scheduler = PredictionScheduler(
                        client, predictor,
                        detected_stat_channel, detected_display_channel
                    )
                    # D√©marre le planificateur en arri√®re-plan
                    asyncio.create_task(scheduler.run_scheduler())
                    await event.respond("‚úÖ **Planificateur d√©marr√©**\n\nLe syst√®me de pr√©dictions automatiques est maintenant actif.")
                else:
                    await event.respond("‚ùå **Configuration manquante**\n\nVeuillez d'abord configurer les canaux source et cible avec `/set_stat` et `/set_display`.")
            else:
                await event.respond("‚ö†Ô∏è **Planificateur d√©j√† actif**\n\nUtilisez `/scheduler stop` pour l'arr√™ter.")

        elif command == "stop":
            if scheduler:
                scheduler.stop_scheduler()
                scheduler = None
                await event.respond("üõë **Planificateur arr√™t√©**\n\nLes pr√©dictions automatiques sont d√©sactiv√©es.")
            else:
                await event.respond("‚ÑπÔ∏è **Planificateur non actif**\n\nUtilisez `/scheduler start` pour le d√©marrer.")

        elif command == "status":
            if scheduler:
                status = scheduler.get_schedule_status()
                status_msg = f"""üìä **Statut du Planificateur**

üîÑ **√âtat**: {'üü¢ Actif' if status['is_running'] else 'üî¥ Inactif'}
üìã **Planification**:
‚Ä¢ Total de pr√©dictions: {status['total']}
‚Ä¢ Pr√©dictions lanc√©es: {status['launched']}
‚Ä¢ Pr√©dictions v√©rifi√©es: {status['verified']}
‚Ä¢ En attente: {status['pending']}

‚è∞ **Prochaine pr√©diction**: {status['next_launch'] or 'Aucune'}

üîß **Configuration**:
‚Ä¢ Canal source: {detected_stat_channel}
‚Ä¢ Canal cible: {detected_display_channel}"""
                await event.respond(status_msg)
            else:
                await event.respond("‚ÑπÔ∏è **Planificateur non configur√©**\n\nUtilisez `/scheduler start` pour l'activer.")

        elif command == "generate":
            if scheduler:
                scheduler.regenerate_schedule()
                await event.respond("üîÑ **Nouvelle planification g√©n√©r√©e**\n\nLa planification quotidienne a √©t√© r√©g√©n√©r√©e avec succ√®s.")
            else:
                # Cr√©e un planificateur temporaire pour g√©n√©rer
                temp_scheduler = PredictionScheduler(client, predictor, 0, 0)
                temp_scheduler.regenerate_schedule()
                await event.respond("‚úÖ **Planification g√©n√©r√©e**\n\nFichier `prediction.yaml` cr√©√©. Utilisez `/scheduler start` pour activer.")

        elif command == "config" and len(message_parts) >= 4:
            source_id = int(message_parts[2])
            target_id = int(message_parts[3])

            # Met √† jour la configuration globale
            update_channel_config(source_id, target_id)

            await event.respond(f"""‚úÖ **Configuration mise √† jour**

üì• **Canal source**: {source_id}
üì§ **Canal cible**: {target_id}

Utilisez `/scheduler start` pour activer le planificateur.""")

        else:
            await event.respond("‚ùå **Commande inconnue**\n\nUtilisez `/scheduler` sans param√®tre pour voir l'aide.")

    except Exception as e:
        print(f"Erreur dans manage_scheduler: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

@client.on(events.NewMessage(pattern='/schedule_info'))
async def schedule_info(event):
    """Affiche les informations d√©taill√©es de la planification (admin uniquement)"""
    try:
        if event.sender_id != ADMIN_ID:
            return

        if scheduler and scheduler.schedule_data:
            # Affiche les 10 prochaines pr√©dictions
            current_time = scheduler.get_current_time_slot()
            upcoming = []

            for numero, data in scheduler.schedule_data.items():
                if (not data["launched"] and
                    data["heure_lancement"] >= current_time):
                    upcoming.append((numero, data["heure_lancement"]))

            upcoming.sort(key=lambda x: x[1])
            upcoming = upcoming[:10]  # Limite √† 10

            msg = "üìÖ **Prochaines Pr√©dictions Automatiques**\n\n"
            for numero, heure in upcoming:
                msg += f"üîµ {numero} ‚Üí {heure}\n"

            if not upcoming:
                msg += "‚ÑπÔ∏è Aucune pr√©diction en attente pour aujourd'hui."

            await event.respond(msg)
        else:
            await event.respond("‚ùå **Aucune planification active**\n\nUtilisez `/scheduler generate` pour cr√©er une planification.")

    except Exception as e:
        print(f"Erreur dans schedule_info: {e}")
        await event.respond(f"‚ùå Erreur: {e}")

# --- TRAITEMENT DES MESSAGES DU CANAL DE STATISTIQUES ---
@client.on(events.NewMessage())
async def handle_messages(event):
    """Handle messages from statistics channel"""
    try:
        # Debug: Log ALL incoming messages first
        message_text = event.message.message if event.message else "Pas de texte"
        print(f"üì¨ TOUS MESSAGES: Canal {event.chat_id} | Texte: {message_text[:100]}")
        print(f"üîß Canal stats configur√©: {detected_stat_channel}")

        # Check if stat channel is configured
        if detected_stat_channel is None:
            print("‚ö†Ô∏è PROBL√àME: Canal de statistiques non configur√©!")
            return

        # Check if message is from the configured channel
        if event.chat_id != detected_stat_channel:
            print(f"‚ùå Message ignor√©: Canal {event.chat_id} ‚â† Canal stats {detected_stat_channel}")
            return

        if not message_text:
            print("‚ùå Message vide ignor√©")
            return

        print(f"‚úÖ Message accept√© du canal stats {event.chat_id}: {message_text}")

        # Check for prediction trigger
        predicted, predicted_game, suit = predictor.should_predict(message_text)
        if predicted:
            # Message de pr√©diction manuelle selon le nouveau format demand√©
            prediction_text = f"üéØN¬∫:{predicted_game} üîµDisüîµtriüö•:statut :‚åõ"

            sent_messages = await broadcast(prediction_text)

            # Store message IDs for later editing
            if sent_messages and predicted_game:
                for chat_id, message_id in sent_messages:
                    predictor.store_prediction_message(predicted_game, message_id, chat_id)

            print(f"‚úÖ Pr√©diction manuelle g√©n√©r√©e pour le jeu #{predicted_game}: {suit}")

        # Check for prediction verification (manuel + automatique)
        verified, number = predictor.verify_prediction(message_text)
        if verified is not None and number is not None:
            statut = predictor.prediction_status.get(number, 'Inconnu')
            # Edit the original prediction message instead of sending new message
            success = await edit_prediction_message(number, statut)
            if success:
                print(f"‚úÖ Message de pr√©diction #{number} mis √† jour avec statut: {statut}")
            else:
                print(f"‚ö†Ô∏è Impossible de mettre √† jour le message #{number}, envoi d'un nouveau message")
                status_text = f"üéØN¬∫:{number} üîµDisüîµtriüö•:statut :{statut}"
                await broadcast(status_text)

        # V√©rification des pr√©dictions automatiques du scheduler
        if scheduler and scheduler.schedule_data:
            # R√©cup√®re les num√©ros des pr√©dictions automatiques en attente
            pending_auto_predictions = []
            for numero_str, data in scheduler.schedule_data.items():
                if data["launched"] and not data["verified"]:
                    numero_int = int(numero_str.replace('N', ''))
                    pending_auto_predictions.append(numero_int)

            if pending_auto_predictions:
                # V√©rifie si ce message correspond √† une pr√©diction automatique
                predicted_num, status = scheduler.verify_prediction_from_message(message_text, pending_auto_predictions)

                if predicted_num and status:
                    # Met √† jour la pr√©diction automatique
                    numero_str = f"N{predicted_num:03d}"
                    if numero_str in scheduler.schedule_data:
                        data = scheduler.schedule_data[numero_str]
                        data["verified"] = True
                        data["statut"] = status

                        # Met √† jour le message
                        await scheduler.update_prediction_message(numero_str, data, status)

                        # Ajouter une nouvelle pr√©diction pour maintenir la continuit√©
                        scheduler.add_next_prediction()

                        # Sauvegarde
                        scheduler.save_schedule(scheduler.schedule_data)
                        print(f"üìù Pr√©diction automatique {numero_str} v√©rifi√©e: {status}")
                        print(f"üîÑ Nouvelle pr√©diction g√©n√©r√©e pour maintenir la continuit√©")

        # Generate periodic report every 20 predictions
        if len(predictor.status_log) > 0 and len(predictor.status_log) % 20 == 0:
            await generate_report()

    except Exception as e:
        print(f"Erreur dans handle_messages: {e}")

async def broadcast(message):
    """Broadcast message to display channel"""
    global detected_display_channel

    sent_messages = []
    if detected_display_channel:
        try:
            sent_message = await client.send_message(detected_display_channel, message)
            sent_messages.append((detected_display_channel, sent_message.id))
            print(f"Message diffus√©: {message}")
        except Exception as e:
            print(f"Erreur lors de l'envoi: {e}")
    else:
        print("‚ö†Ô∏è Canal d'affichage non configur√©")

    return sent_messages

async def edit_prediction_message(game_number: int, new_status: str):
    """Edit prediction message with new status"""
    try:
        message_info = predictor.get_prediction_message(game_number)
        if message_info:
            chat_id = message_info['chat_id']
            message_id = message_info['message_id']
            new_text = f"üéØN¬∫:{game_number} üîµDisüîµtriüö•:statut :{new_status}"

            await client.edit_message(chat_id, message_id, new_text)
            print(f"Message de pr√©diction #{game_number} mis √† jour avec statut: {new_status}")
            return True
    except Exception as e:
        print(f"Erreur lors de la modification du message: {e}")
    return False

async def generate_report():
    """Generate and broadcast periodic report with updated format"""
    try:
        bilan = "üìä Bilan des 20 derni√®res pr√©dictions :\n"

        recent_predictions = predictor.status_log[-20:]
        for num, statut in recent_predictions:
            bilan += f"üéØN¬∫:{num} üîµDisüîµtriüö•:statut :{statut}\n"

        # Calculate statistics
        total = len(recent_predictions)
        wins = sum(1 for _, status in recent_predictions if '‚úÖ' in status)
        win_rate = (wins / total * 100) if total > 0 else 0

        bilan += f"\nüìà Statistiques: {wins}/{total} ({win_rate:.1f}% de r√©ussite)"

        await broadcast(bilan)
        print(f"Rapport g√©n√©r√©: {wins}/{total} pr√©dictions r√©ussies")

    except Exception as e:
        print(f"Erreur dans generate_report: {e}")

# --- ENVOI VERS LES CANAUX ---
# (Function moved above to handle message editing)

# --- GESTION D'ERREURS ET RECONNEXION ---
async def handle_connection_error():
    """Handle connection errors and attempt reconnection"""
    print("Tentative de reconnexion...")
    await asyncio.sleep(5)
    try:
        await client.connect()
        print("Reconnexion r√©ussie")
    except Exception as e:
        print(f"√âchec de la reconnexion: {e}")

# --- SERVEUR WEB POUR MONITORING ---
async def health_check(request):
    """Health check endpoint"""
    return web.Response(text="Bot is running!", status=200)

async def bot_status(request):
    """Bot status endpoint"""
    status = {
        "bot_online": True,
        "stat_channel": detected_stat_channel,
        "display_channel": detected_display_channel,
        "predictions_active": len(predictor.prediction_status),
        "total_predictions": len(predictor.status_log)
    }
    return web.json_response(status)

async def create_web_server():
    """Create and start web server"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_get('/status', bot_status)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    print(f"‚úÖ Serveur web d√©marr√© sur 0.0.0.0:{PORT}")
    return runner

# --- LANCEMENT ---
async def main():
    """Main function to start the bot"""
    print("D√©marrage du bot Telegram...")
    print(f"API_ID: {API_ID}")
    print(f"Bot Token configur√©: {'Oui' if BOT_TOKEN else 'Non'}")
    print(f"Port web: {PORT}")

    # Validate configuration
    if not API_ID or not API_HASH or not BOT_TOKEN:
        print("‚ùå Configuration manquante! V√©rifiez votre fichier .env")
        return

    try:
        # Start web server first
        web_runner = await create_web_server()
        
        # Start the bot
        if await start_bot():
            print("‚úÖ Bot en ligne et en attente de messages...")
            print(f"üåê Acc√®s web: http://0.0.0.0:{PORT}")
            await client.run_until_disconnected()
        else:
            print("‚ùå √âchec du d√©marrage du bot")

    except KeyboardInterrupt:
        print("\nüõë Arr√™t du bot demand√© par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        await handle_connection_error()
    finally:
        try:
            await client.disconnect()
            print("Bot d√©connect√© proprement")
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main())
